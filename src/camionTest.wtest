import camion.*
import cosas.*

describe "Tests para la carga del camión" {

	method initialize() {
		camion.cargar(bumblebee)
		arenaAGranel.peso(2000)
	}

	test "Comprobar que se puede agregar carga al camión" {
		const cargaInicial = camion.totalBultos()
		camion.cargar(bumblebee)
		assert.that(camion.totalBultos() == cargaInicial + 1)
	}

	test "Se descargan correctamentamente cosas del camión" {
		camion.descargar(bumblebee)
		assert.that(camion.totalBultos() == 0)
	}

	test "Evalúa la carga que tiene determinado peso" {
		assert.that(camion.todoPesoPar())
		assert.that(camion.hayAlgunoQuePesa(800))
		assert.that(camion.tieneAlgoQuePesaEntre(750, 1000))
		assert.notThat(camion.tieneAlgoQuePesaEntre(450, 490))
	}

	test "Evalúa el nivel de peligrosidad de la carga " {
		assert.equals(bumblebee, camion.elDeNivel(15))
		// En este test quise implementar el assert.throwsException, porque usaba el find en el mensaje elDeNivel y al no encontrar el valor indicado, devolvía error. Pero no pude hacerlo funcionar, no sabría cómo implementarlo. Entonces utilicé el findOrElse y forcé un falso en caso de no encontrarse el valor.
		assert.notEquals(bumblebee, camion.elDeNivel(20))
		assert.that(camion.superaNivelPeligrosidad(14))
		assert.notThat(camion.superaNivelPeligrosidad(16))
	}

	test "Evalúa el peso total correctamente" {
		assert.equals(800, camion.pesoTotal())
		camion.cargar(bumblebee)
		assert.equals(1600, camion.pesoTotal())
		assert.notThat(camion.excedidoDePeso())
		camion.cargar(arenaAGranel)
		assert.that(camion.excedidoDePeso())
	}

	test "Evalúa el peso de los objetos de la carga correctamente" {
		camion.cargar(knightRider)
		camion.cargar(arenaAGranel)
		assert.equals(arenaAGranel, camion.cosaMasPesada())
	}

}

